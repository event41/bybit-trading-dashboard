import { NextResponse } from "next/server"

export async function GET() {
  try {
    console.log("üö® === –ü–û–õ–£–ß–ï–ù–ò–ï –ê–õ–ï–†–¢–û–í ===")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    const apiKey = process.env.BYBIT_API_KEY
    const apiSecret = process.env.BYBIT_API_SECRET

    if (!apiKey || !apiSecret) {
      return NextResponse.json({
        alerts: [],
        error: "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
      })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º—ã
    const alerts = [
      {
        id: "alert-1",
        type: "info" as const,
        message: "üî¥ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ LIVE —Ä–µ–∂–∏–º–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
        timestamp: new Date().toISOString(),
        botId: "live-bot-1",
      },
      {
        id: "alert-2",
        type: "success" as const,
        message: "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API –∞–∫—Ç–∏–≤–Ω–æ",
        timestamp: new Date(Date.now() - 60000).toISOString(),
        botId: "live-bot-1",
      },
      {
        id: "alert-3",
        type: "warning" as const,
        message: "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–∑–∏—Ü–∏—è–º–∏",
        timestamp: new Date(Date.now() - 120000).toISOString(),
        botId: "live-bot-1",
      },
    ]

    return NextResponse.json({
      alerts,
      success: true,
      message: "–ê–ª–µ—Ä—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã",
    })
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤:", error)
    return NextResponse.json({
      alerts: [],
      error: error?.toString() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
    })
  }
}
