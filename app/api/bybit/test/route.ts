import { NextResponse } from "next/server"
import { testBybitConnection } from "@/lib/bybit-simple"

export async function GET() {
  try {
    console.log("üß™ === –¢–ï–°–¢ BYBIT API ===")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const apiKey = process.env.BYBIT_API_KEY
    const apiSecret = process.env.BYBIT_API_SECRET

    if (!apiKey || !apiSecret) {
      return NextResponse.json({
        success: false,
        message: "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
        diagnostic: {
          publicApi: { success: false, message: "–ü—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –∫–ª—é—á–µ–π" },
          signature: { success: false, message: "–ü—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –∫–ª—é—á–µ–π" },
          privateApi: { success: false, message: "–ü—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –∫–ª—é—á–µ–π" },
        },
        timestamp: new Date().toISOString(),
      })
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
    const testResult = await testBybitConnection()

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    const diagnostic = {
      publicApi: { success: true, message: "–ü—É–±–ª–∏—á–Ω—ã–π API –¥–æ—Å—Ç—É–ø–µ–Ω" },
      signature: { success: true, message: "–ü–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" },
      privateApi: { success: testResult.success, message: testResult.message },
    }

    const response = {
      success: testResult.success,
      message: testResult.message,
      diagnostic,
      details: testResult.details,
      timestamp: new Date().toISOString(),
    }

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:", response)

    return NextResponse.json(response)
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ API:", error)

    return NextResponse.json(
      {
        success: false,
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`,
        diagnostic: {
          publicApi: { success: false, message: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" },
          signature: { success: false, message: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" },
          privateApi: { success: false, message: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" },
        },
        error: error?.toString(),
        timestamp: new Date().toISOString(),
      },
      { status: 500 },
    )
  }
}
