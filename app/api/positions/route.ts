import { NextResponse } from "next/server"
import { getBybitPositions } from "@/lib/bybit-simple"

export async function GET() {
  try {
    console.log("üìä === –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô ===")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    const apiKey = process.env.BYBIT_API_KEY
    const apiSecret = process.env.BYBIT_API_SECRET

    if (!apiKey || !apiSecret) {
      console.log("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
      return NextResponse.json({
        positions: [],
        error: "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
        message: "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ Bybit",
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    let rawPositions = []

    try {
      rawPositions = await getBybitPositions()
      console.log("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:", rawPositions.length)
    } catch (error) {
      console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:", error)
      return NextResponse.json({
        positions: [],
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π",
        message: error?.toString() || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å Bybit",
      })
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    const positions = rawPositions
      .filter((pos: any) => pos.size && Number.parseFloat(pos.size) > 0)
      .map((pos: any, index: number) => {
        const size = Number.parseFloat(pos.size || "0")
        const entryPrice = Number.parseFloat(pos.entryPrice || "0")
        const markPrice = Number.parseFloat(pos.markPrice || "0")
        const unrealisedPnl = Number.parseFloat(pos.unrealisedPnl || "0")
        const positionValue = Number.parseFloat(pos.positionValue || "1")

        return {
          id: `pos-${index}`,
          botId: "live-bot-1",
          symbol: pos.symbol || "UNKNOWN",
          side: pos.side || "Buy",
          size: size,
          entryPrice: entryPrice,
          currentPrice: markPrice,
          pnl: unrealisedPnl,
          pnlPercentage: positionValue > 0 ? (unrealisedPnl / positionValue) * 100 : 0,
          openTime: pos.createdTime || new Date().toISOString(),
        }
      })

    console.log("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:", positions.length)

    return NextResponse.json({
      positions,
      success: true,
      message: `–ü–æ–ª—É—á–µ–Ω–æ ${positions.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π`,
    })
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:", error)
    return NextResponse.json({
      positions: [],
      error: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
      message: error?.toString() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      success: false,
    })
  }
}
