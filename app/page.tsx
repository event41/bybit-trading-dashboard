"use client"

import { useState, useEffect } from "react"
import type { TradingBot, ActivePosition, Alert } from "@/types/trading"
import { BotCard } from "@/components/bot-card"
import { DiagnosticPanel } from "@/components/diagnostic-panel"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { RefreshCw, DollarSign, TrendingUp, Activity, Users, Settings } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { fetchBots, fetchActivePositions, fetchAlerts } from "@/lib/bybit-api"

export default function Dashboard() {
  const [bots, setBots] = useState<TradingBot[]>([])
  const [positions, setPositions] = useState<ActivePosition[]>([])
  const [alerts, setAlerts] = useState<Alert[]>([])
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date())
  const [isLoading, setIsLoading] = useState(false)
  const [apiStatus, setApiStatus] = useState<"unknown" | "connected" | "demo" | "error">("unknown")
  const [showDiagnostics, setShowDiagnostics] = useState(true) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [isClient, setIsClient] = useState(false)

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π
  useEffect(() => {
    setIsClient(true)
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadData = async () => {
    console.log("üîÑ === –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –î–ê–ù–ù–´–• ===")
    setIsLoading(true)
    try {
      const [botsData, positionsData, alertsData] = await Promise.all([
        fetchBots(),
        fetchActivePositions(),
        fetchAlerts(),
      ])

      console.log("üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
      console.log("- –ë–æ—Ç—ã:", botsData)
      console.log("- –ü–æ–∑–∏—Ü–∏–∏:", positionsData)
      console.log("- –ê–ª–µ—Ä—Ç—ã:", alertsData)

      setBots(botsData)
      setPositions(positionsData)
      setAlerts(alertsData)
      setLastUpdate(new Date())

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
      const hasRealData = botsData.some((bot) => bot.name.includes("üî¥ LIVE"))
      const hasDemoData = botsData.some((bot) => bot.name.includes("üé≠ DEMO") || bot.name.includes("üìä Demo"))

      if (hasRealData) {
        setApiStatus("connected")
      } else if (hasDemoData) {
        setApiStatus("demo")
      } else {
        setApiStatus("error")
      }

      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å API:", hasRealData ? "connected" : hasDemoData ? "demo" : "error")
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error)
      setApiStatus("error")
    } finally {
      setIsLoading(false)
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    loadData()
  }, [])

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const interval = setInterval(loadData, 30000)
    return () => clearInterval(interval)
  }, [])

  // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const totalBalance = bots.reduce((sum, bot) => sum + bot.balance, 0)
  const totalPnL = bots.reduce((sum, bot) => sum + bot.totalPnL, 0)
  const activeBots = bots.filter((bot) => bot.status === "active").length
  const totalTrades = bots.reduce((sum, bot) => sum + bot.totalTrades, 0)
  const totalOpenPositions = positions.length
  const totalOpenPnL = positions.reduce((sum, pos) => sum + pos.pnl, 0)

  const getApiStatusBadge = () => {
    switch (apiStatus) {
      case "connected":
        return <Badge className="bg-green-600">üü¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</Badge>
      case "demo":
        return <Badge className="bg-yellow-600">üé≠ –î–µ–º–æ —Ä–µ–∂–∏–º</Badge>
      case "error":
        return <Badge variant="destructive">üî¥ –û—à–∏–±–∫–∞</Badge>
      default:
        return <Badge variant="secondary">‚ö™ –ü—Ä–æ–≤–µ—Ä–∫–∞...</Badge>
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏
  if (!isClient) {
    return (
      <div className="min-h-screen bg-gray-50 p-4 md:p-6">
        <div className="max-w-7xl mx-auto space-y-6">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">üöÄ Bybit Trading Dashboard</h1>
              <div className="flex items-center gap-4 mt-1">
                <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                <Badge variant="secondary">‚ö™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</Badge>
              </div>
            </div>
          </div>
          <div className="text-center py-12">
            <div className="inline-flex items-center gap-2 text-gray-600">
              <RefreshCw className="h-4 w-4 animate-spin" />
              –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞...
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">üöÄ Bybit Trading Dashboard</h1>
            <div className="flex items-center gap-4 mt-1">
              <p className="text-gray-600">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdate.toLocaleTimeString("ru-RU")}</p>
              {getApiStatusBadge()}
            </div>
          </div>
          <div className="flex gap-2">
            <Button onClick={() => setShowDiagnostics(!showDiagnostics)} variant="outline" size="sm">
              <Settings className="h-4 w-4 mr-2" />
              {showDiagnostics ? "–°–∫—Ä—ã—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É" : "–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"}
            </Button>
            <Button onClick={loadData} disabled={isLoading}>
              <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? "animate-spin" : ""}`} />
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </div>
        </div>

        {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å */}
        {showDiagnostics && (
          <div className="bg-white rounded-lg border-2 border-blue-200">
            <DiagnosticPanel />
          </div>
        )}

        {/* API —Å—Ç–∞—Ç—É—Å */}
        {apiStatus === "error" && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                <span className="text-sm font-medium text-yellow-800">
                  ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.
                </span>
              </div>
              <Button size="sm" variant="outline" onClick={() => setShowDiagnostics(true)}>
                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
              </Button>
            </div>
          </div>
        )}

        {apiStatus === "demo" && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
                <span className="text-sm font-medium text-yellow-800">
                  üé≠ –î–µ–º–æ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
                </span>
              </div>
              <Button size="sm" variant="outline" onClick={() => setShowDiagnostics(true)}>
                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API
              </Button>
            </div>
          </div>
        )}

        {apiStatus === "connected" && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-sm font-medium text-green-800">
                üî¥ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É Bybit API! –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
              </span>
            </div>
          </div>
        )}

        {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-gray-600">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</CardTitle>
              <DollarSign className="h-4 w-4 text-gray-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-gray-900">${totalBalance.toLocaleString()}</div>
              <p className="text-xs text-gray-500 mt-1">USD</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-gray-600">–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</CardTitle>
              <Activity className="h-4 w-4 text-gray-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-gray-900">{totalOpenPositions}</div>
              <div className={`text-xs mt-1 ${totalOpenPnL >= 0 ? "text-green-600" : "text-red-600"}`}>
                P&L: {totalOpenPnL >= 0 ? "+" : ""}${totalOpenPnL.toFixed(2)}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã</CardTitle>
              <Users className="h-4 w-4 text-gray-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-gray-900">
                {activeBots}/{bots.length}
              </div>
              <p className="text-xs text-gray-500 mt-1">
                {activeBots} –∏–∑ {bots.length} —Ä–∞–±–æ—Ç–∞—é—Ç
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-gray-600">–û–±—â–∏–π P&L</CardTitle>
              <TrendingUp className="h-4 w-4 text-gray-500" />
            </CardHeader>
            <CardContent>
              <div className={`text-2xl font-bold ${totalPnL >= 0 ? "text-green-600" : "text-red-600"}`}>
                {totalPnL >= 0 ? "+" : ""}${totalPnL.toFixed(2)}
              </div>
              <p className="text-xs text-gray-500 mt-1">{totalPnL >= 0 ? "–ü—Ä–∏–±—ã–ª—å" : "–£–±—ã—Ç–æ–∫"}</p>
            </CardContent>
          </Card>
        </div>

        {/* –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {isLoading && (
          <div className="text-center py-4">
            <div className="inline-flex items-center gap-2 text-gray-600">
              <RefreshCw className="h-4 w-4 animate-spin" />
              –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö... (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞)
            </div>
          </div>
        )}

        {/* –ë–æ—Ç—ã */}
        <div>
          <h2 className="text-2xl font-bold mb-6 text-gray-900">üìä –¢–æ—Ä–≥–æ–≤—ã–µ –±–æ—Ç—ã</h2>
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {bots.map((bot) => (
              <BotCard key={bot.id} bot={bot} activePositions={positions} />
            ))}
          </div>
        </div>

        {/* –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
        {bots.length === 0 && !isLoading && (
          <div className="text-center py-12">
            <div className="text-gray-400 text-6xl mb-4">ü§ñ</div>
            <h3 className="text-xl font-semibold text-gray-600 mb-2">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤</h3>
            <p className="text-gray-500 mb-4">–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å API</p>
            <Button onClick={() => setShowDiagnostics(true)}>–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É</Button>
          </div>
        )}

        {/* –§—É—Ç–µ—Ä */}
        <div className="text-center py-6 border-t border-gray-200">
          <p className="text-sm text-gray-500">
            üîç –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
          </p>
        </div>
      </div>
    </div>
  )
}
