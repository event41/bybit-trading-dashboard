"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { RefreshCw, CheckCircle, XCircle, AlertTriangle, Activity } from "lucide-react"

interface DiagnosticResult {
  success: boolean
  message: string
  details?: any
}

interface SystemStatus {
  environment: {
    NODE_ENV: string
    BYBIT_API_KEY_EXISTS: boolean
    BYBIT_API_SECRET_EXISTS: boolean
    BYBIT_API_KEY_LENGTH: number
    BYBIT_API_SECRET_LENGTH: number
    BYBIT_API_KEY_PREVIEW: string
    BYBIT_API_SECRET_PREVIEW: string
  }
  diagnosis: {
    keysExist: boolean
    keysValid: boolean
    keysConfigured: boolean
    issue: string
    solution: string
  }
}

export function SimpleDiagnostic() {
  const [systemStatus, setSystemStatus] = useState<SystemStatus | null>(null)
  const [apiTest, setApiTest] = useState<DiagnosticResult | null>(null)
  const [loading, setLoading] = useState(false)

  const checkSystemStatus = async () => {
    try {
      const response = await fetch("/api/status")
      const data = await response.json()
      setSystemStatus(data)
      console.log("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:", data)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", error)
    }
  }

  const testApiConnection = async () => {
    setLoading(true)
    try {
      const response = await fetch("/api/bybit/test")
      const data = await response.json()
      setApiTest(data)
      console.log("üîç –¢–µ—Å—Ç API:", data)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ API:", error)
      setApiTest({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: " + error?.toString(),
        details: { error: error?.toString() },
      })
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    checkSystemStatus()
  }, [])

  const getStatusIcon = (success: boolean) => {
    return success ? <CheckCircle className="h-4 w-4 text-green-600" /> : <XCircle className="h-4 w-4 text-red-600" />
  }

  const getStatusBadge = (success: boolean, text: string) => {
    return (
      <Badge variant={success ? "default" : "destructive"} className={success ? "bg-green-600" : ""}>
        {success ? "‚úÖ" : "‚ùå"} {text}
      </Badge>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Activity className="h-5 w-5" />üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex gap-2">
          <Button onClick={checkSystemStatus} variant="outline" size="sm">
            <RefreshCw className="h-4 w-4 mr-2" />
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          </Button>
          <Button onClick={testApiConnection} disabled={loading} variant="outline" size="sm">
            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? "animate-spin" : ""}`} />
            –¢–µ—Å—Ç API
          </Button>
        </div>

        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
        {systemStatus && (
          <div className="space-y-4">
            <h3 className="font-semibold">üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è</h3>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  {getStatusIcon(systemStatus.environment.BYBIT_API_KEY_EXISTS)}
                  <span className="text-sm">API Key –Ω–∞–π–¥–µ–Ω</span>
                </div>
                <div className="flex items-center gap-2">
                  {getStatusIcon(systemStatus.environment.BYBIT_API_SECRET_EXISTS)}
                  <span className="text-sm">API Secret –Ω–∞–π–¥–µ–Ω</span>
                </div>
                <div className="flex items-center gap-2">
                  {getStatusIcon(systemStatus.diagnosis.keysValid)}
                  <span className="text-sm">–ö–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã</span>
                </div>
                <div className="flex items-center gap-2">
                  {getStatusIcon(systemStatus.diagnosis.keysConfigured)}
                  <span className="text-sm">–ö–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</span>
                </div>
              </div>

              <div className="space-y-2 text-sm">
                <div>
                  <span className="text-gray-600">NODE_ENV:</span> {systemStatus.environment.NODE_ENV}
                </div>
                <div>
                  <span className="text-gray-600">API Key –¥–ª–∏–Ω–∞:</span> {systemStatus.environment.BYBIT_API_KEY_LENGTH}
                </div>
                <div>
                  <span className="text-gray-600">API Secret –¥–ª–∏–Ω–∞:</span>{" "}
                  {systemStatus.environment.BYBIT_API_SECRET_LENGTH}
                </div>
                {systemStatus.environment.BYBIT_API_KEY_PREVIEW && (
                  <div>
                    <span className="text-gray-600">API Key:</span> {systemStatus.environment.BYBIT_API_KEY_PREVIEW}
                  </div>
                )}
              </div>
            </div>

            {/* –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å */}
            <div className="p-4 rounded-lg border">
              <div className="flex items-center gap-2 mb-2">
                {getStatusIcon(systemStatus.diagnosis.keysConfigured)}
                <span className="font-medium">{systemStatus.diagnosis.issue}</span>
              </div>
              <p className="text-sm text-gray-600">{systemStatus.diagnosis.solution}</p>
            </div>
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ API */}
        {apiTest && (
          <div className="space-y-4">
            <h3 className="font-semibold">üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API</h3>

            <div
              className={`p-4 rounded-lg border ${
                apiTest.success
                  ? "border-green-200 bg-green-50 dark:bg-green-950/20"
                  : "border-red-200 bg-red-50 dark:bg-red-950/20"
              }`}
            >
              <div className="flex items-center gap-2 mb-2">
                {getStatusIcon(apiTest.success)}
                <span className="font-medium">{apiTest.success ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ" : "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}</span>
              </div>
              <p className={`text-sm ${apiTest.success ? "text-green-700" : "text-red-700"}`}>{apiTest.message}</p>

              {apiTest.details && (
                <details className="mt-3">
                  <summary className="cursor-pointer text-sm text-gray-600 hover:text-gray-800">
                    –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
                  </summary>
                  <pre className="mt-2 text-xs bg-gray-100 dark:bg-gray-800 p-2 rounded overflow-auto max-h-40">
                    {JSON.stringify(apiTest.details, null, 2)}
                  </pre>
                </details>
              )}
            </div>
          </div>
        )}

        {/* –°—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
        <div className="space-y-4">
          <h3 className="font-semibold">üß© –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</h3>

          <div className="flex flex-wrap gap-2">
            {systemStatus && (
              <>
                {getStatusBadge(systemStatus.environment.BYBIT_API_KEY_EXISTS, "API Key")}
                {getStatusBadge(systemStatus.environment.BYBIT_API_SECRET_EXISTS, "API Secret")}
                {getStatusBadge(systemStatus.diagnosis.keysValid, "–í–∞–ª–∏–¥–∞—Ü–∏—è")}
                {getStatusBadge(systemStatus.diagnosis.keysConfigured, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")}
              </>
            )}
            {apiTest && getStatusBadge(apiTest.success, "API Connection")}
          </div>
        </div>

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        {systemStatus && !systemStatus.diagnosis.keysConfigured && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <AlertTriangle className="h-4 w-4 text-yellow-600" />
              <span className="font-medium text-yellow-800">–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ</span>
            </div>
            <p className="text-sm text-yellow-700 mb-3">{systemStatus.diagnosis.solution}</p>
            <div className="text-xs text-yellow-600">
              <div>1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞</div>
              <div>2. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ —Å Bybit</div>
              <div>3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</div>
            </div>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
        <div className="text-xs text-gray-500 border-t pt-4">
          <div>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {new Date().toLocaleString("ru-RU")}</div>
          <div>–í–µ—Ä—Å–∏—è: Next.js App Router</div>
          <div>–†–µ–∂–∏–º: {systemStatus?.environment.NODE_ENV || "unknown"}</div>
        </div>
      </CardContent>
    </Card>
  )
}
