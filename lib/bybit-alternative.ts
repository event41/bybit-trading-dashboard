// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bybit API —Å –¥—Ä—É–≥–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ø–æ–¥–ø–∏—Å–∏

const API_KEY = process.env.BYBIT_API_KEY || "nBvwdEqz4WgGCQIQBR"
const API_SECRET = process.env.BYBIT_API_SECRET || "NY3exgnwUQZtO14ysRUepZSjRGJfpKNmikBXN"

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏ (–∫–∞–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö)
function createAlternativeSignature(timestamp: string, params: Record<string, any>): string {
  if (typeof window !== "undefined") {
    return "browser_mock_signature"
  }

  try {
    const crypto = require("crypto")

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á–∞–º
    const sortedKeys = Object.keys(params).sort()

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let paramString = ""
    for (const key of sortedKeys) {
      if (paramString) paramString += "&"
      paramString += `${key}=${params[key]}`
    }

    // –§–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: timestamp + apiKey + recvWindow + paramString
    const recvWindow = "5000"
    const message = timestamp + API_KEY + recvWindow + paramString

    console.log("üîê –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å—å:")
    console.log("- message:", message)

    const signature = crypto.createHmac("sha256", API_SECRET).update(message).digest("hex")
    console.log("- signature:", signature.substring(0, 16) + "...")

    return signature
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏:", error)
    return "error_signature"
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
export async function makeAlternativeRequest(endpoint: string, params: Record<string, any> = {}) {
  console.log(`üåê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ Bybit: ${endpoint}`)

  try {
    const timestamp = Date.now().toString()
    const signature = createAlternativeSignature(timestamp, params)

    const queryString = new URLSearchParams(params).toString()

    const headers = {
      "X-BAPI-API-KEY": API_KEY,
      "X-BAPI-SIGN": signature,
      "X-BAPI-SIGN-TYPE": "2",
      "X-BAPI-TIMESTAMP": timestamp,
      "X-BAPI-RECV-WINDOW": "5000",
      "Content-Type": "application/json",
    }

    const url = `https://api.bybit.com${endpoint}?${queryString}`
    console.log("üîó –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL:", url)

    const response = await fetch(url, {
      method: "GET",
      headers,
    })

    const data = await response.json()
    console.log("üìä –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç:", data)

    if (data.retCode === 0) {
      console.log("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –†–ê–ë–û–¢–ê–ï–¢!")
      return data.result
    } else {
      console.error("‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:", data.retMsg)
      return null
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", error)
    return null
  }
}

// –¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
export async function testAlternativeMethod() {
  console.log("üß™ === –¢–ï–°–¢–ò–†–£–ï–ú –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î ===")

  const result = await makeAlternativeRequest("/v5/account/wallet-balance", {
    accountType: "UNIFIED",
  })

  return result !== null
}
