// –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BYBIT API - –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞

export interface DiagnosticResult {
  step: string
  success: boolean
  message: string
  details?: any
  error?: string
}

export interface FullDiagnostic {
  timestamp: string
  environment: any
  apiKeys: any
  publicApi: DiagnosticResult
  signature: DiagnosticResult
  privateApi: DiagnosticResult
  summary: {
    success: boolean
    mainIssue: string
    recommendation: string
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getEnvironmentInfo() {
  return {
    nodeEnv: process.env.NODE_ENV,
    platform: typeof window !== "undefined" ? "browser" : "server",
    bybitApiKey: process.env.BYBIT_API_KEY ? `${process.env.BYBIT_API_KEY.substring(0, 8)}...` : "–ù–ï–¢",
    bybitApiSecret: process.env.BYBIT_API_SECRET ? `${process.env.BYBIT_API_SECRET.substring(0, 8)}...` : "–ù–ï–¢",
    allEnvVars: typeof process !== "undefined" ? Object.keys(process.env).filter((key) => key.includes("BYBIT")) : [],
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
function validateApiKeys() {
  const apiKey = process.env.BYBIT_API_KEY
  const apiSecret = process.env.BYBIT_API_SECRET

  return {
    hasApiKey: !!apiKey,
    hasApiSecret: !!apiSecret,
    apiKeyLength: apiKey?.length || 0,
    apiSecretLength: apiSecret?.length || 0,
    apiKeyPreview: apiKey ? `${apiKey.substring(0, 10)}...` : null,
    apiSecretPreview: apiSecret ? `${apiSecret.substring(0, 10)}...` : null,
    isTestKeys: apiKey === "nBvwdEqz4WgGCQIQBR" && apiSecret === "NY3exgnwUQZtO14ysRUepZSjRGJfpKNmikBXN",
    keysValid: !!(apiKey && apiSecret && apiKey.length > 10 && apiSecret.length > 20),
  }
}

// –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
async function testPublicApi(): Promise<DiagnosticResult> {
  try {
    console.log("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API Bybit...")

    const response = await fetch("https://api.bybit.com/v5/market/tickers?category=linear&symbol=BTCUSDT", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    })

    console.log("üì• –ü—É–±–ª–∏—á–Ω—ã–π API - HTTP —Å—Ç–∞—Ç—É—Å:", response.status)

    if (!response.ok) {
      return {
        step: "public_api",
        success: false,
        message: `HTTP –æ—à–∏–±–∫–∞: ${response.status}`,
        error: `HTTP ${response.status}`,
      }
    }

    const data = await response.json()
    console.log("üìä –ü—É–±–ª–∏—á–Ω—ã–π API - –æ—Ç–≤–µ—Ç:", data)

    if (data.retCode === 0) {
      return {
        step: "public_api",
        success: true,
        message: "–ü—É–±–ª–∏—á–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        details: {
          symbol: data.result?.list?.[0]?.symbol,
          price: data.result?.list?.[0]?.lastPrice,
        },
      }
    } else {
      return {
        step: "public_api",
        success: false,
        message: `Bybit API –æ—à–∏–±–∫–∞: ${data.retMsg}`,
        error: data.retMsg,
        details: data,
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API:", error)
    return {
      step: "public_api",
      success: false,
      message: `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error}`,
      error: error?.toString(),
    }
  }
}

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
async function testSignature(): Promise<DiagnosticResult> {
  if (typeof window !== "undefined") {
    return {
      step: "signature",
      success: false,
      message: "–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
      error: "Browser environment",
    }
  }

  try {
    const crypto = require("crypto")
    const apiKey = process.env.BYBIT_API_KEY
    const apiSecret = process.env.BYBIT_API_SECRET

    if (!apiKey || !apiSecret) {
      return {
        step: "signature",
        success: false,
        message: "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        error: "Missing API keys",
      }
    }

    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const timestamp = "1672531200000" // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const recvWindow = "5000"
    const queryString = "accountType=UNIFIED"

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É Bybit V5
    const message = timestamp + apiKey + recvWindow + queryString
    const signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex")

    console.log("üîê –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∏:")
    console.log("  - message:", message)
    console.log("  - signature:", signature)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if (signature && signature.length === 64) {
      return {
        step: "signature",
        success: true,
        message: "–ü–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        details: {
          messageLength: message.length,
          signatureLength: signature.length,
          signaturePreview: signature.substring(0, 16) + "...",
        },
      }
    } else {
      return {
        step: "signature",
        success: false,
        message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å",
        error: "Invalid signature format",
        details: { signature },
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏:", error)
    return {
      step: "signature",
      success: false,
      message: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏: ${error}`,
      error: error?.toString(),
    }
  }
}

// –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API
async function testPrivateApi(): Promise<DiagnosticResult> {
  if (typeof window !== "undefined") {
    return {
      step: "private_api",
      success: false,
      message: "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π API –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
      error: "Browser environment",
    }
  }

  try {
    const crypto = require("crypto")
    const apiKey = process.env.BYBIT_API_KEY
    const apiSecret = process.env.BYBIT_API_SECRET

    if (!apiKey || !apiSecret) {
      return {
        step: "private_api",
        success: false,
        message: "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API",
        error: "Missing API keys",
      }
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const timestamp = Date.now().toString()
    const recvWindow = "5000"
    const queryString = "accountType=UNIFIED"

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    const message = timestamp + apiKey + recvWindow + queryString
    const signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex")

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
      "X-BAPI-API-KEY": apiKey,
      "X-BAPI-SIGN": signature,
      "X-BAPI-SIGN-TYPE": "2",
      "X-BAPI-TIMESTAMP": timestamp,
      "X-BAPI-RECV-WINDOW": recvWindow,
      "Content-Type": "application/json",
    }

    const url = `https://api.bybit.com/v5/account/wallet-balance?${queryString}`

    console.log("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π API:")
    console.log("  - URL:", url)
    console.log("  - Headers:", {
      ...headers,
      "X-BAPI-API-KEY": apiKey.substring(0, 8) + "...",
      "X-BAPI-SIGN": signature.substring(0, 16) + "...",
    })

    const response = await fetch(url, {
      method: "GET",
      headers,
    })

    console.log("üì• –ü—Ä–∏–≤–∞—Ç–Ω—ã–π API - HTTP —Å—Ç–∞—Ç—É—Å:", response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error("‚ùå HTTP –æ—à–∏–±–∫–∞:", errorText)

      return {
        step: "private_api",
        success: false,
        message: `HTTP –æ—à–∏–±–∫–∞ ${response.status}`,
        error: errorText,
        details: {
          status: response.status,
          statusText: response.statusText,
        },
      }
    }

    const data = await response.json()
    console.log("üìä –ü—Ä–∏–≤–∞—Ç–Ω—ã–π API - –æ—Ç–≤–µ—Ç:", data)

    if (data.retCode === 0) {
      return {
        step: "private_api",
        success: true,
        message: "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
        details: {
          accountType: data.result?.list?.[0]?.accountType,
          coinsCount: data.result?.list?.[0]?.coin?.length || 0,
          hasBalance: data.result?.list?.[0]?.coin?.some((c: any) => Number.parseFloat(c.walletBalance) > 0),
        },
      }
    } else {
      return {
        step: "private_api",
        success: false,
        message: `Bybit API –æ—à–∏–±–∫–∞: ${data.retMsg}`,
        error: data.retMsg,
        details: {
          retCode: data.retCode,
          retMsg: data.retMsg,
        },
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API:", error)
    return {
      step: "private_api",
      success: false,
      message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`,
      error: error?.toString(),
    }
  }
}

// –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
export async function runFullDiagnostic(): Promise<FullDiagnostic> {
  console.log("üîç === –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò BYBIT API ===")

  const timestamp = new Date().toISOString()
  const environment = getEnvironmentInfo()
  const apiKeys = validateApiKeys()

  console.log("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏:", environment)
  console.log("üîë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API –∫–ª—é—á–∞—Ö:", apiKeys)

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  const publicApi = await testPublicApi()
  const signature = await testSignature()
  const privateApi = await testPrivateApi()

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  let mainIssue = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
  let recommendation = "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"

  if (!publicApi.success) {
    mainIssue = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Bybit"
    recommendation = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å api.bybit.com"
  } else if (!apiKeys.keysValid) {
    mainIssue = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ API –∫–ª—é—á–∏"
    recommendation = "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏ –Ω–∞ bybit.com –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ .env.local"
  } else if (!signature.success) {
    mainIssue = "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∏"
    recommendation = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API Secret"
  } else if (!privateApi.success) {
    mainIssue = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"
    recommendation = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ API –∫–ª—é—á–µ–π –∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
  } else {
    mainIssue = "–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    recommendation = "API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
  }

  const result: FullDiagnostic = {
    timestamp,
    environment,
    apiKeys,
    publicApi,
    signature,
    privateApi,
    summary: {
      success: publicApi.success && signature.success && privateApi.success,
      mainIssue,
      recommendation,
    },
  }

  console.log("üéØ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===")
  console.log("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π API:", publicApi.success ? "OK" : "FAIL")
  console.log("‚úÖ –ü–æ–¥–ø–∏—Å—å:", signature.success ? "OK" : "FAIL")
  console.log("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π API:", privateApi.success ? "OK" : "FAIL")
  console.log("üîç –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞:", mainIssue)
  console.log("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", recommendation)

  return result
}

// –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è UI
export async function quickDiagnostic() {
  const environment = getEnvironmentInfo()
  const apiKeys = validateApiKeys()
  const publicApi = await testPublicApi()

  return {
    environment: environment.platform,
    hasKeys: apiKeys.keysValid,
    publicApiWorks: publicApi.success,
    canRunFullTest: environment.platform === "server",
    recommendation: !apiKeys.keysValid
      ? "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏"
      : !publicApi.success
        ? "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Bybit"
        : "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
  }
}
