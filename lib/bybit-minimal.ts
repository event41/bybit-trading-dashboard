// –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å—å—é

const API_KEY = "nBvwdEqz4WgGCQIQBR"
const API_SECRET = "NY3exgnwUQZtO14ysRUepZSjRGJfpKNmikBXN"

// –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∏
export async function minimalSignatureTest() {
  if (typeof window !== "undefined") {
    console.log("‚ùå –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    return false
  }

  try {
    const crypto = require("crypto")

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const timestamp = "1672531200000"
    const recvWindow = "5000"
    const queryString = "accountType=UNIFIED"

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    const message = timestamp + API_KEY + recvWindow + queryString
    console.log("üîê –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message)

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    const signature = crypto.createHmac("sha256", API_SECRET).update(message).digest("hex")
    console.log("üîê –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å:", signature)

    // –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
    // –≠—Ç–æ –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ Bybit

    return true
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:", error)
    return false
  }
}

// –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
export async function simpleApiTest() {
  console.log("üß™ === –ü–†–û–°–¢–û–ô –¢–ï–°–¢ API ===")

  try {
    const crypto = require("crypto")

    const timestamp = Date.now().toString()
    const recvWindow = "5000"
    const queryString = "accountType=UNIFIED"

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    const message = timestamp + API_KEY + recvWindow + queryString
    const signature = crypto.createHmac("sha256", API_SECRET).update(message).digest("hex")

    console.log("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
    console.log("- timestamp:", timestamp)
    console.log("- message:", message)
    console.log("- signature:", signature)

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
      "X-BAPI-API-KEY": API_KEY,
      "X-BAPI-SIGN": signature,
      "X-BAPI-SIGN-TYPE": "2",
      "X-BAPI-TIMESTAMP": timestamp,
      "X-BAPI-RECV-WINDOW": recvWindow,
      "Content-Type": "application/json",
    }

    const url = `https://api.bybit.com/v5/account/wallet-balance?${queryString}`
    console.log("üîó URL:", url)

    const response = await fetch(url, {
      method: "GET",
      headers,
    })

    const data = await response.json()
    console.log("üìä –û—Ç–≤–µ—Ç:", data)

    if (data.retCode === 0) {
      console.log("‚úÖ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ü–†–û–®–ï–õ!")
      return { success: true, data }
    } else {
      console.log("‚ùå –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ:", data.retMsg)
      return { success: false, error: data.retMsg, data }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞:", error)
    return { success: false, error: error?.toString() }
  }
}
