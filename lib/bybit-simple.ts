// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ë–ï–ó –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

const API_KEY = process.env.BYBIT_API_KEY || ""
const API_SECRET = process.env.BYBIT_API_SECRET || ""

console.log("üîç === –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô (–ë–ï–ó –î–ï–ú–û) ===")
console.log(
  "- process.env.BYBIT_API_KEY:",
  process.env.BYBIT_API_KEY ? `${process.env.BYBIT_API_KEY.substring(0, 8)}...` : "–û–¢–°–£–¢–°–¢–í–£–ï–¢",
)
console.log(
  "- process.env.BYBIT_API_SECRET:",
  process.env.BYBIT_API_SECRET ? `${process.env.BYBIT_API_SECRET.substring(0, 8)}...` : "–û–¢–°–£–¢–°–¢–í–£–ï–¢",
)

// –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createCorrectSignature(timestamp: string, apiKey: string, recvWindow: string, queryString: string): string {
  if (typeof window !== "undefined") {
    throw new Error("–ü–æ–¥–ø–∏—Å—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
  }

  try {
    const crypto = require("crypto")
    const message = timestamp + apiKey + recvWindow + queryString

    console.log("üîê –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏:")
    console.log("  - timestamp:", timestamp)
    console.log("  - apiKey:", apiKey.substring(0, 8) + "...")
    console.log("  - recvWindow:", recvWindow)
    console.log("  - queryString:", queryString)
    console.log("  - message:", message)

    const signature = crypto.createHmac("sha256", API_SECRET).update(message).digest("hex")
    console.log("  - signature:", signature)

    return signature
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏:", error)
    throw error
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π - –ë–ï–ó –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
function validateApiKeys(): { valid: boolean; message: string } {
  console.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–µ–π (—Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞):")
  console.log("- API_KEY –¥–ª–∏–Ω–∞:", API_KEY?.length || 0)
  console.log("- API_SECRET –¥–ª–∏–Ω–∞:", API_SECRET?.length || 0)

  if (!API_KEY || !API_SECRET) {
    console.log("‚ùå API –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return {
      valid: false,
      message: "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏",
    }
  }

  if (API_KEY.length < 10 || API_SECRET.length < 20) {
    console.log("‚ùå API –∫–ª—é—á–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ")
    return {
      valid: false,
      message: "API –∫–ª—é—á–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å",
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
  if (API_KEY === "nBvwdEqz4WgGCQIQBR" || API_SECRET === "NY3exgnwUQZtO14ysRUepZSjRGJfpKNmikBXN") {
    console.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ - –æ–Ω–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!")
    return {
      valid: false,
      message: "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ - –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ —Å Bybit",
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ placeholder'—ã
  if (
    API_KEY.includes("–≤–∞—à_") ||
    API_SECRET.includes("–≤–∞—à_") ||
    API_KEY.includes("your_") ||
    API_SECRET.includes("your_")
  ) {
    console.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã placeholder'—ã –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π")
    return {
      valid: false,
      message: "–í .env.local –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è placeholder'—ã - –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏",
    }
  }

  console.log("‚úÖ API –∫–ª—é—á–∏ –≤—ã–≥–ª—è–¥—è—Ç –≤–∞–ª–∏–¥–Ω—ã–º–∏")
  return { valid: true, message: "API –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã" }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ - –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
async function makeBybitRequest(endpoint: string, params: Record<string, any> = {}) {
  console.log(`\nüåê === –†–ï–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–° –ö BYBIT API ===`)
  console.log("üìç Endpoint:", endpoint)
  console.log("üìù Params:", params)

  // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
  const keyValidation = validateApiKeys()
  if (!keyValidation.valid) {
    console.log("‚ùå", keyValidation.message)
    throw new Error(keyValidation.message)
  }

  try {
    const timestamp = Date.now().toString()
    const recvWindow = "5000"

    const queryString = Object.keys(params)
      .sort()
      .map((key) => `${key}=${params[key]}`)
      .join("&")

    console.log("üîó Query string:", queryString)

    const signature = createCorrectSignature(timestamp, API_KEY, recvWindow, queryString)

    const headers = {
      "X-BAPI-API-KEY": API_KEY,
      "X-BAPI-SIGN": signature,
      "X-BAPI-SIGN-TYPE": "2",
      "X-BAPI-TIMESTAMP": timestamp,
      "X-BAPI-RECV-WINDOW": recvWindow,
      "Content-Type": "application/json",
    }

    const url = `https://api.bybit.com${endpoint}${queryString ? `?${queryString}` : ""}`
    console.log("üîó URL:", url)

    const response = await fetch(url, {
      method: "GET",
      headers,
    })

    console.log("üì• HTTP Status:", response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error("‚ùå HTTP Error:", response.status, errorText)
      throw new Error(`HTTP ${response.status}: ${errorText}`)
    }

    const data = await response.json()
    console.log("üìä Response:")
    console.log("  - retCode:", data.retCode)
    console.log("  - retMsg:", data.retMsg)

    if (data.retCode === 0) {
      console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å!")
      return { success: true, error: null, data: data.result }
    } else {
      console.error("‚ùå Bybit API Error:", data.retMsg)
      throw new Error(`Bybit API Error: ${data.retMsg}`)
    }
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error)
    throw error
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
export async function getBybitBalance() {
  console.log("\nüí∞ === –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê ===")

  try {
    const result = await makeBybitRequest("/v5/account/wallet-balance", {
      accountType: "UNIFIED",
    })

    console.log("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ API")
    return result.data
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error)
    throw error
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–û —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
export async function getBybitPositions() {
  console.log("\nüìä === –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –ü–û–ó–ò–¶–ò–ô ===")

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–∏–º–≤–æ–ª—É
    const result = await makeBybitRequest("/v5/position/list", {
      category: "linear",
      settleCoin: "USDT", // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    })

    const positions = result.data?.list || []
    console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ API: ${positions.length} —à—Ç.`)

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    const openPositions = positions.filter((pos: any) => pos.size && Number.parseFloat(pos.size) > 0)

    console.log(`üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${openPositions.length} –∏–∑ ${positions.length}`)
    return openPositions
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:", error)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
    return []
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ - –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
export async function getBybitTrades() {
  console.log("\nüìà === –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –°–î–ï–õ–û–ö ===")

  try {
    const result = await makeBybitRequest("/v5/execution/list", {
      category: "linear",
      limit: 50,
    })

    const trades = result.data?.list || []
    console.log(`‚úÖ –°–¥–µ–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ API: ${trades.length} —à—Ç.`)
    return trades
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫:", error)
    return []
  }
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
export async function testBybitConnection() {
  console.log("\nüîç === –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===")

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
  const keyValidation = validateApiKeys()
  if (!keyValidation.valid) {
    return {
      success: false,
      message: `‚ùå ${keyValidation.message}`,
      details: {
        apiKey: !!API_KEY,
        apiSecret: !!API_SECRET,
        keyLength: API_KEY.length,
        secretLength: API_SECRET.length,
        validation: keyValidation.message,
      },
    }
  }

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API
    console.log("1Ô∏è‚É£ –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API...")
    const publicResponse = await fetch("https://api.bybit.com/v5/market/tickers?category=linear&symbol=BTCUSDT")

    if (!publicResponse.ok) {
      throw new Error(`Public API failed: ${publicResponse.status}`)
    }

    const publicData = await publicResponse.json()
    if (publicData.retCode !== 0) {
      throw new Error(`Public API error: ${publicData.retMsg}`)
    }

    console.log("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç")

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π API
    console.log("2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API...")
    const balanceResult = await makeBybitRequest("/v5/account/wallet-balance", {
      accountType: "UNIFIED",
    })

    return {
      success: true,
      message: "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å–ø–µ—à–Ω–æ!",
      details: {
        publicApi: "OK",
        privateApi: "OK",
        balance: balanceResult.data,
      },
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error)
    return {
      success: false,
      message: `‚ùå –û—à–∏–±–∫–∞: ${error}`,
      details: { error: error?.toString() },
    }
  }
}

// –°—Ç–∞—Ç—É—Å API - —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
export function getApiStatus() {
  const keyValidation = validateApiKeys()

  return {
    hasKeys: !!(API_KEY && API_SECRET),
    apiKey: !!API_KEY,
    apiSecret: !!API_SECRET,
    keyPreview: API_KEY ? `${API_KEY.substring(0, 8)}...` : null,
    secretPreview: API_SECRET ? `${API_SECRET.substring(0, 8)}...` : null,
    keyLength: API_KEY.length,
    secretLength: API_SECRET.length,
    source: process.env.BYBIT_API_KEY ? "environment" : "missing",
    validation: keyValidation,
    isDemo: false, // –î–µ–º–æ —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω
  }
}

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function diagnoseEnvironment() {
  return {
    nodeEnv: process.env.NODE_ENV,
    bybitVars: Object.keys(process.env).filter((key) => key.includes("BYBIT")),
    allEnvKeys: Object.keys(process.env).length,
    hasEnvFile: process.env.BYBIT_API_KEY ? "YES" : "NO",
    demoMode: false, // –î–µ–º–æ —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω
  }
}
