// –ü–û–õ–ù–û–°–¢–¨–Æ –ù–û–í–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bybit API —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é

const API_KEY = process.env.BYBIT_API_KEY || "nBvwdEqz4WgGCQIQBR"
const API_SECRET = process.env.BYBIT_API_SECRET || "NY3exgnwUQZtO14ysRUepZSjRGJfpKNmikBXN"

console.log("üîë === –ù–û–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BYBIT API ===")
console.log("- API_KEY –¥–ª–∏–Ω–∞:", API_KEY.length)
console.log("- API_SECRET –¥–ª–∏–Ω–∞:", API_SECRET.length)
console.log("- API_KEY –Ω–∞—á–∞–ª–æ:", API_KEY.substring(0, 10))

const hasApiKeys = !!(API_KEY && API_SECRET)

// –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Bybit V5
function createBybitSignature(timestamp: string, queryString: string): string {
  if (typeof window !== "undefined") {
    console.log("üåê –ë—Ä–∞—É–∑–µ—Ä - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –ø–æ–¥–ø–∏—Å—å")
    return "browser_mock_signature"
  }

  try {
    console.log("üîê === –°–û–ó–î–ê–ù–ò–ï –ü–û–î–ü–ò–°–ò ===")
    const crypto = require("crypto")

    const recvWindow = "5000"

    // –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Bybit V5: timestamp + apiKey + recvWindow + queryString
    const message = timestamp + API_KEY + recvWindow + queryString

    console.log("üìù –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∏:")
    console.log("  - timestamp:", timestamp)
    console.log("  - apiKey:", API_KEY.substring(0, 8) + "...")
    console.log("  - recvWindow:", recvWindow)
    console.log("  - queryString:", queryString)
    console.log("  - message:", message)

    const signature = crypto.createHmac("sha256", API_SECRET).update(message).digest("hex")
    console.log("  - signature:", signature)

    return signature
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏:", error)
    return "error_signature"
  }
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Bybit
async function makeBybitApiRequest(endpoint: string, params: Record<string, any> = {}) {
  console.log(`\nüåê === –ù–û–í–´–ô –ó–ê–ü–†–û–° –ö BYBIT ===`)
  console.log("üìç Endpoint:", endpoint)
  console.log("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", JSON.stringify(params, null, 2))

  if (!hasApiKeys) {
    console.log("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return null
  }

  try {
    const timestamp = Date.now().toString()
    const recvWindow = "5000"

    // –°–æ–∑–¥–∞–µ–º query string
    const queryString = new URLSearchParams(params).toString()
    console.log("üîó Query string:", queryString)

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    const signature = createBybitSignature(timestamp, queryString)

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
      "X-BAPI-API-KEY": API_KEY,
      "X-BAPI-SIGN": signature,
      "X-BAPI-SIGN-TYPE": "2",
      "X-BAPI-TIMESTAMP": timestamp,
      "X-BAPI-RECV-WINDOW": recvWindow,
      "Content-Type": "application/json",
    }

    console.log("üì§ –ó–∞–≥–æ–ª–æ–≤–∫–∏ (—Å–∫—Ä—ã—Ç—ã–µ –∫–ª—é—á–∏):")
    console.log("  - X-BAPI-API-KEY:", API_KEY.substring(0, 8) + "...")
    console.log("  - X-BAPI-SIGN:", signature.substring(0, 16) + "...")
    console.log("  - X-BAPI-TIMESTAMP:", timestamp)
    console.log("  - X-BAPI-RECV-WINDOW:", recvWindow)

    const url = `https://api.bybit.com${endpoint}${queryString ? `?${queryString}` : ""}`
    console.log("üîó –ü–æ–ª–Ω—ã–π URL:", url)

    console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
    const response = await fetch(url, {
      method: "GET",
      headers,
    })

    console.log("üì• HTTP —Å—Ç–∞—Ç—É—Å:", response.status)
    console.log("üì• HTTP —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:", response.statusText)

    if (!response.ok) {
      const errorText = await response.text()
      console.error("‚ùå HTTP –æ—à–∏–±–∫–∞:")
      console.error("  - –°—Ç–∞—Ç—É—Å:", response.status)
      console.error("  - –¢–µ–∫—Å—Ç:", errorText)
      return null
    }

    const responseText = await response.text()
    console.log("üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):", responseText.substring(0, 300) + "...")

    let data
    try {
      data = JSON.parse(responseText)
    } catch (parseError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", parseError)
      console.error("‚ùå –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:", responseText)
      return null
    }

    console.log("üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    console.log("  - retCode:", data.retCode)
    console.log("  - retMsg:", data.retMsg)
    console.log("  - result —Ç–∏–ø:", typeof data.result)
    console.log("  - result –∫–ª—é—á–∏:", data.result ? Object.keys(data.result) : "null")

    if (data.retCode === 0) {
      console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bybit!")
      return data.result
    } else {
      console.error("‚ùå Bybit API –æ—à–∏–±–∫–∞:")
      console.error("  - –ö–æ–¥:", data.retCode)
      console.error("  - –°–æ–æ–±—â–µ–Ω–∏–µ:", data.retMsg)
      console.error("  - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", JSON.stringify(data, null, 2))
      return null
    }
  } catch (error) {
    console.error("‚ùå === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê ===")
    console.error("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:", error.constructor.name)
    console.error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message)
    console.error("‚ùå –°—Ç–µ–∫:", error.stack)
    return null
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
export async function getBybitBalance() {
  console.log("\nüí∞ === –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê ===")

  const result = await makeBybitApiRequest("/v5/account/wallet-balance", {
    accountType: "UNIFIED",
  })

  console.log("üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞–ª–∞–Ω—Å–∞:", result ? "–ü–æ–ª—É—á–µ–Ω" : "–û—à–∏–±–∫–∞")
  return result
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
export async function getBybitPositions() {
  console.log("\nüìä === –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô ===")

  const result = await makeBybitApiRequest("/v5/position/list", {
    category: "linear",
  })

  console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∑–∏—Ü–∏–π:", result ? `–ü–æ–ª—É—á–µ–Ω–æ ${result.list?.length || 0} –ø–æ–∑–∏—Ü–∏–π` : "–û—à–∏–±–∫–∞")
  return result?.list || []
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
export async function getBybitTrades() {
  console.log("\nüìà === –ü–û–õ–£–ß–ï–ù–ò–ï –°–î–ï–õ–û–ö ===")

  const result = await makeBybitApiRequest("/v5/execution/list", {
    category: "linear",
    limit: 50,
  })

  console.log("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–æ–∫:", result ? `–ü–æ–ª—É—á–µ–Ω–æ ${result.list?.length || 0} —Å–¥–µ–ª–æ–∫` : "–û—à–∏–±–∫–∞")
  return result?.list || []
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export async function testBybitConnection() {
  console.log("\nüîç === –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===")

  if (!hasApiKeys) {
    return {
      success: false,
      message: "‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
      details: {
        apiKey: !!API_KEY,
        apiSecret: !!API_SECRET,
        envFile: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.local",
      },
    }
  }

  try {
    // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API
    console.log("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API...")
    const publicResponse = await fetch("https://api.bybit.com/v5/market/tickers?category=linear&symbol=BTCUSDT")

    if (!publicResponse.ok) {
      throw new Error(`Public API failed: ${publicResponse.status}`)
    }

    const publicData = await publicResponse.json()
    if (publicData.retCode !== 0) {
      throw new Error(`Public API error: ${publicData.retMsg}`)
    }

    console.log("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç")

    // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π API
    console.log("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π API...")
    const balance = await getBybitBalance()

    if (balance !== null) {
      return {
        success: true,
        message: "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å–ø–µ—à–Ω–æ!",
        details: {
          publicApi: "OK",
          privateApi: "OK",
          balance: balance,
        },
      }
    } else {
      return {
        success: false,
        message: "‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        details: {
          publicApi: "OK",
          privateApi: "ERROR",
        },
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error)
    return {
      success: false,
      message: `‚ùå –û—à–∏–±–∫–∞: ${error}`,
      details: { error: error?.toString() },
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
export function getApiStatus() {
  return {
    hasKeys: hasApiKeys,
    apiKey: !!API_KEY,
    apiSecret: !!API_SECRET,
    keyPreview: API_KEY ? `${API_KEY.substring(0, 8)}...` : null,
    secretPreview: API_SECRET ? `${API_SECRET.substring(0, 8)}...` : null,
    keyLength: API_KEY.length,
    secretLength: API_SECRET.length,
    source: process.env.BYBIT_API_KEY ? "env file" : "hardcoded",
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
export function diagnoseEnvironment() {
  return {
    nodeEnv: process.env.NODE_ENV,
    bybitVars: Object.keys(process.env).filter((key) => key.includes("BYBIT")),
    allEnvKeys: Object.keys(process.env).length,
    hasEnvFile: process.env.BYBIT_API_KEY ? "YES" : "NO",
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function directApiTest() {
  console.log("\nüß™ === –ü–†–Ø–ú–û–ô –¢–ï–°–¢ API ===")

  const results = {
    balance: null as any,
    positions: null as any,
    trades: null as any,
    errors: [] as string[],
  }

  try {
    console.log("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å...")
    results.balance = await getBybitBalance()
    if (!results.balance) results.errors.push("balance")
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞:", error)
    results.errors.push(`balance: ${error}`)
  }

  try {
    console.log("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏...")
    results.positions = await getBybitPositions()
    if (!results.positions || results.positions.length === 0) results.errors.push("positions")
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–π:", error)
    results.errors.push(`positions: ${error}`)
  }

  try {
    console.log("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏...")
    results.trades = await getBybitTrades()
    if (!results.trades || results.trades.length === 0) results.errors.push("trades")
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–¥–µ–ª–æ–∫:", error)
    results.errors.push(`trades: ${error}`)
  }

  console.log("\nüìã === –ò–¢–û–ì–ò –ü–†–Ø–ú–û–ì–û –¢–ï–°–¢–ê ===")
  console.log("‚úÖ –ë–∞–ª–∞–Ω—Å:", results.balance ? "OK" : "FAIL")
  console.log("‚úÖ –ü–æ–∑–∏—Ü–∏–∏:", results.positions ? "OK" : "FAIL")
  console.log("‚úÖ –°–¥–µ–ª–∫–∏:", results.trades ? "OK" : "FAIL")
  console.log("‚ùå –û—à–∏–±–∫–∏:", results.errors)

  return results
}
