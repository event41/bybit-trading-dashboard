// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–∫–∏ Bybit

const API_KEY = process.env.BYBIT_API_KEY || "nBvwdEqz4WgGCQIQBR"
const API_SECRET = process.env.BYBIT_API_SECRET || "NY3exgnwUQZtO14ysRUepZSjRGJfpKNmikBXN"

console.log("üîë === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø BYBIT API ===")
console.log("- API_KEY:", API_KEY ? `${API_KEY.substring(0, 8)}...` : "–ù–ï–¢")
console.log("- API_SECRET:", API_SECRET ? `${API_SECRET.substring(0, 8)}...` : "–ù–ï–¢")

// –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–∫–∏ Bybit
function createCorrectSignature(timestamp: string, apiKey: string, recvWindow: string, queryString: string): string {
  if (typeof window !== "undefined") {
    return "browser_mock_signature"
  }

  try {
    const crypto = require("crypto")

    // –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–∫–∏ Bybit: origin_string[1752920866001nBvwdEqz4WgGCQIQBR5000category=linear]
    // –§–æ—Ä–º–∞—Ç: timestamp + apiKey + recvWindow + queryString
    const message = timestamp + apiKey + recvWindow + queryString

    console.log("üîê –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏:")
    console.log("  - timestamp:", timestamp)
    console.log("  - apiKey:", apiKey.substring(0, 8) + "...")
    console.log("  - recvWindow:", recvWindow)
    console.log("  - queryString:", queryString)
    console.log("  - message:", message)

    const signature = crypto.createHmac("sha256", API_SECRET).update(message).digest("hex")
    console.log("  - signature:", signature)

    return signature
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏:", error)
    return "error_signature"
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π
function validateApiKeys(): { valid: boolean; message: string; isDemo: boolean } {
  if (!API_KEY || !API_SECRET) {
    return { valid: false, message: "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", isDemo: false }
  }

  if (API_KEY.length < 10 || API_SECRET.length < 10) {
    return { valid: false, message: "API –∫–ª—é—á–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ", isDemo: false }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
  if (API_KEY === "nBvwdEqz4WgGCQIQBR" || API_SECRET === "NY3exgnwUQZtO14ysRUepZSjRGJfpKNmikBXN") {
    return {
      valid: true,
      message: "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ (–¥–µ–º–æ —Ä–µ–∂–∏–º)",
      isDemo: true,
    }
  }

  return { valid: true, message: "API –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã", isDemo: false }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeBybitRequest(endpoint: string, params: Record<string, any> = {}) {
  console.log(`\nüåê === –ó–ê–ü–†–û–° –ö BYBIT API ===`)
  console.log("üìç Endpoint:", endpoint)
  console.log("üìù Params:", params)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
  const keyValidation = validateApiKeys()
  if (!keyValidation.valid) {
    console.log("‚ùå", keyValidation.message)
    return { success: false, error: keyValidation.message, data: null, isDemo: false }
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–º–æ —Ä–µ–∂–∏–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (keyValidation.isDemo) {
    console.log("üé≠ –î–ï–ú–û –†–ï–ñ–ò–ú: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    return { success: true, error: null, data: getMockData(endpoint), isDemo: true }
  }

  // –†–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∫–ª—é—á–µ–π)
  try {
    const timestamp = Date.now().toString()
    const recvWindow = "5000"

    const queryString = Object.keys(params)
      .sort()
      .map((key) => `${key}=${params[key]}`)
      .join("&")

    console.log("üîó Query string:", queryString)

    const signature = createCorrectSignature(timestamp, API_KEY, recvWindow, queryString)

    const headers = {
      "X-BAPI-API-KEY": API_KEY,
      "X-BAPI-SIGN": signature,
      "X-BAPI-SIGN-TYPE": "2",
      "X-BAPI-TIMESTAMP": timestamp,
      "X-BAPI-RECV-WINDOW": recvWindow,
      "Content-Type": "application/json",
    }

    const url = `https://api.bybit.com${endpoint}${queryString ? `?${queryString}` : ""}`
    console.log("üîó URL:", url)

    const response = await fetch(url, {
      method: "GET",
      headers,
    })

    console.log("üì• HTTP Status:", response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error("‚ùå HTTP Error:", response.status, errorText)
      return { success: false, error: `HTTP ${response.status}: ${errorText}`, data: null, isDemo: false }
    }

    const data = await response.json()
    console.log("üìä Response:")
    console.log("  - retCode:", data.retCode)
    console.log("  - retMsg:", data.retMsg)

    if (data.retCode === 0) {
      console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å!")
      return { success: true, error: null, data: data.result, isDemo: false }
    } else {
      console.error("‚ùå Bybit API Error:", data.retMsg)
      return { success: false, error: data.retMsg, data: null, isDemo: false }
    }
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error)
    return { success: false, error: error?.toString(), data: null, isDemo: false }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function getMockData(endpoint: string) {
  console.log("üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è:", endpoint)

  if (endpoint.includes("wallet-balance")) {
    return {
      coin: [
        {
          coin: "USDT",
          walletBalance: "15420.50",
          transferBalance: "15420.50",
          bonus: "0",
        },
        {
          coin: "BTC",
          walletBalance: "0.25",
          transferBalance: "0.25",
          bonus: "0",
        },
      ],
    }
  }

  if (endpoint.includes("position/list")) {
    return {
      list: [
        {
          symbol: "BTCUSDT",
          side: "Buy",
          size: "0.5",
          positionValue: "21710.0",
          entryPrice: "43420.0",
          markPrice: "43520.5",
          unrealisedPnl: "50.25",
          createdTime: (Date.now() - 1800000).toString(),
        },
        {
          symbol: "ETHUSDT",
          side: "Sell",
          size: "2.0",
          positionValue: "5300.0",
          entryPrice: "2650.0",
          markPrice: "2634.8",
          unrealisedPnl: "30.4",
          createdTime: (Date.now() - 900000).toString(),
        },
      ],
    }
  }

  if (endpoint.includes("execution/list")) {
    return {
      list: [
        {
          execId: "demo-trade-1",
          symbol: "BTCUSDT",
          side: "Buy",
          execQty: "0.1",
          execPrice: "43200.0",
          execFee: "4.32",
          execTime: (Date.now() - 3600000).toString(),
        },
        {
          execId: "demo-trade-2",
          symbol: "ETHUSDT",
          side: "Sell",
          execQty: "1.0",
          execPrice: "2640.0",
          execFee: "2.64",
          execTime: (Date.now() - 7200000).toString(),
        },
      ],
    }
  }

  return null
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
export async function getBybitBalance() {
  console.log("\nüí∞ === –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê ===")

  const result = await makeBybitRequest("/v5/account/wallet-balance", {
    accountType: "UNIFIED",
  })

  if (result.success) {
    if (result.isDemo) {
      console.log("üé≠ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω –∏–∑ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö")
    } else {
      console.log("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ API")
    }
    return result.data
  } else {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", result.error)
    return null
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
export async function getBybitPositions() {
  console.log("\nüìä === –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô ===")

  const result = await makeBybitRequest("/v5/position/list", {
    category: "linear",
  })

  if (result.success) {
    const positions = result.data?.list || []
    if (result.isDemo) {
      console.log(`üé≠ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö: ${positions.length} —à—Ç.`)
    } else {
      console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ API: ${positions.length} —à—Ç.`)
    }
    return positions
  } else {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:", result.error)
    return []
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
export async function getBybitTrades() {
  console.log("\nüìà === –ü–û–õ–£–ß–ï–ù–ò–ï –°–î–ï–õ–û–ö ===")

  const result = await makeBybitRequest("/v5/execution/list", {
    category: "linear",
    limit: 50,
  })

  if (result.success) {
    const trades = result.data?.list || []
    if (result.isDemo) {
      console.log(`üé≠ –°–¥–µ–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö: ${trades.length} —à—Ç.`)
    } else {
      console.log(`‚úÖ –°–¥–µ–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ API: ${trades.length} —à—Ç.`)
    }
    return trades
  } else {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫:", result.error)
    return []
  }
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
export async function testBybitConnection() {
  console.log("\nüîç === –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===")

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
  const keyValidation = validateApiKeys()
  if (!keyValidation.valid) {
    return {
      success: false,
      message: `‚ùå ${keyValidation.message}`,
      details: {
        apiKey: !!API_KEY,
        apiSecret: !!API_SECRET,
        keyLength: API_KEY.length,
        secretLength: API_SECRET.length,
        validation: keyValidation.message,
      },
    }
  }

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API
    console.log("1Ô∏è‚É£ –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API...")
    const publicResponse = await fetch("https://api.bybit.com/v5/market/tickers?category=linear&symbol=BTCUSDT")

    if (!publicResponse.ok) {
      throw new Error(`Public API failed: ${publicResponse.status}`)
    }

    const publicData = await publicResponse.json()
    if (publicData.retCode !== 0) {
      throw new Error(`Public API error: ${publicData.retMsg}`)
    }

    console.log("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç")

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π API
    console.log("2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API...")
    const balanceResult = await makeBybitRequest("/v5/account/wallet-balance", {
      accountType: "UNIFIED",
    })

    if (balanceResult.success) {
      return {
        success: true,
        message: "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å–ø–µ—à–Ω–æ!",
        details: {
          publicApi: "OK",
          privateApi: "OK",
          balance: balanceResult.data,
        },
      }
    } else {
      return {
        success: false,
        message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API: ${balanceResult.error}`,
        details: {
          publicApi: "OK",
          privateApi: "ERROR",
          error: balanceResult.error,
        },
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error)
    return {
      success: false,
      message: `‚ùå –û—à–∏–±–∫–∞: ${error}`,
      details: { error: error?.toString() },
    }
  }
}

// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
export async function directApiTest() {
  console.log("\nüß™ === –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –í–°–ï–• –≠–ù–î–ü–û–ò–ù–¢–û–í ===")

  const results = {
    balance: null as any,
    positions: null as any,
    trades: null as any,
    errors: [] as string[],
    success: false,
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏ —Å–Ω–∞—á–∞–ª–∞
  const keyValidation = validateApiKeys()
  if (!keyValidation.valid) {
    results.errors.push(keyValidation.message)
    return results
  }

  // –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞
  try {
    console.log("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å...")
    const balanceResult = await makeBybitRequest("/v5/account/wallet-balance", { accountType: "UNIFIED" })

    if (balanceResult.success) {
      results.balance = balanceResult.data
      console.log("‚úÖ –ë–∞–ª–∞–Ω—Å: OK")
    } else {
      results.errors.push(`Balance: ${balanceResult.error}`)
      console.log("‚ùå –ë–∞–ª–∞–Ω—Å: FAIL")
    }
  } catch (error) {
    results.errors.push(`Balance exception: ${error}`)
    console.log("‚ùå –ë–∞–ª–∞–Ω—Å: EXCEPTION")
  }

  // –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–π
  try {
    console.log("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏...")
    const positionsResult = await makeBybitRequest("/v5/position/list", { category: "linear" })

    if (positionsResult.success) {
      results.positions = positionsResult.data
      console.log("‚úÖ –ü–æ–∑–∏—Ü–∏–∏: OK")
    } else {
      results.errors.push(`Positions: ${positionsResult.error}`)
      console.log("‚ùå –ü–æ–∑–∏—Ü–∏–∏: FAIL")
    }
  } catch (error) {
    results.errors.push(`Positions exception: ${error}`)
    console.log("‚ùå –ü–æ–∑–∏—Ü–∏–∏: EXCEPTION")
  }

  // –¢–µ—Å—Ç —Å–¥–µ–ª–æ–∫
  try {
    console.log("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏...")
    const tradesResult = await makeBybitRequest("/v5/execution/list", { category: "linear", limit: 10 })

    if (tradesResult.success) {
      results.trades = tradesResult.data
      console.log("‚úÖ –°–¥–µ–ª–∫–∏: OK")
    } else {
      results.errors.push(`Trades: ${tradesResult.error}`)
      console.log("‚ùå –°–¥–µ–ª–∫–∏: FAIL")
    }
  } catch (error) {
    results.errors.push(`Trades exception: ${error}`)
    console.log("‚ùå –°–¥–µ–ª–∫–∏: EXCEPTION")
  }

  results.success = results.errors.length === 0

  console.log("\nüìã === –ò–¢–û–ì–ò –ü–†–Ø–ú–û–ì–û –¢–ï–°–¢–ê ===")
  console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ:", results.success)
  console.log("‚ùå –û—à–∏–±–æ–∫:", results.errors.length)
  console.log("üìä –î–µ—Ç–∞–ª–∏:", results.errors)

  return results
}

// –°—Ç–∞—Ç—É—Å API
export function getApiStatus() {
  const keyValidation = validateApiKeys()

  return {
    hasKeys: !!(API_KEY && API_SECRET),
    apiKey: !!API_KEY,
    apiSecret: !!API_SECRET,
    keyPreview: API_KEY ? `${API_KEY.substring(0, 8)}...` : null,
    secretPreview: API_SECRET ? `${API_SECRET.substring(0, 8)}...` : null,
    keyLength: API_KEY.length,
    secretLength: API_SECRET.length,
    source: process.env.BYBIT_API_KEY ? "environment" : "hardcoded",
    validation: keyValidation,
  }
}

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function diagnoseEnvironment() {
  return {
    nodeEnv: process.env.NODE_ENV,
    bybitVars: Object.keys(process.env).filter((key) => key.includes("BYBIT")),
    allEnvKeys: Object.keys(process.env).length,
    hasEnvFile: process.env.BYBIT_API_KEY ? "YES" : "NO",
  }
}
