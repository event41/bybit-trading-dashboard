"use client"

export interface WebSocketMessage {
  topic: string
  type: string
  data: any
  ts: number
}

export interface PositionUpdate {
  symbol: string
  side: "Buy" | "Sell"
  size: string
  positionValue: string
  entryPrice: string
  markPrice: string
  unrealisedPnl: string
  updatedTime: string
}

export class BybitWebSocket {
  private ws: WebSocket | null = null
  private reconnectAttempts = 0
  private maxReconnectAttempts = 5
  private reconnectDelay = 1000
  private isConnected = false
  private subscriptions: Set<string> = new Set()

  // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  private onPositionUpdate?: (positions: PositionUpdate[]) => void
  private onPriceUpdate?: (prices: Record<string, number>) => void
  private onConnectionChange?: (connected: boolean) => void

  constructor() {
    this.connect()
  }

  private connect() {
    try {
      // –ü—É–±–ª–∏—á–Ω—ã–π WebSocket Bybit (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–Ω)
      this.ws = new WebSocket("wss://stream.bybit.com/v5/public/linear")

      this.ws.onopen = () => {
        console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Bybit")
        this.isConnected = true
        this.reconnectAttempts = 0
        this.onConnectionChange?.(true)

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä
        this.subscribeToTickers(["BTCUSDT", "ETHUSDT", "SOLUSDT", "ADAUSDT", "DOGEUSDT", "BNBUSDT"])
      }

      this.ws.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data)
          this.handleMessage(message)
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
        }
      }

      this.ws.onclose = () => {
        console.log("‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")
        this.isConnected = false
        this.onConnectionChange?.(false)
        this.handleReconnect()
      }

      this.ws.onerror = (error) => {
        console.error("WebSocket –æ—à–∏–±–∫–∞:", error)
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:", error)
      this.handleReconnect()
    }
  }

  private handleMessage(message: WebSocketMessage) {
    if (message.topic?.startsWith("tickers.")) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
      const data = message.data
      if (data && data.symbol && data.lastPrice) {
        const prices: Record<string, number> = {}
        prices[data.symbol] = Number.parseFloat(data.lastPrice)
        this.onPriceUpdate?.(prices)
      }
    }
  }

  private subscribeToTickers(symbols: string[]) {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) return

    symbols.forEach((symbol) => {
      const subscription = {
        op: "subscribe",
        args: [`tickers.${symbol}`],
      }

      this.ws!.send(JSON.stringify(subscription))
      this.subscriptions.add(`tickers.${symbol}`)
      console.log(`üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${symbol}`)
    })
  }

  private handleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ")
      return
    }

    this.reconnectAttempts++
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`)

    setTimeout(() => {
      this.connect()
    }, this.reconnectDelay * this.reconnectAttempts)
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  public onPositionsUpdate(callback: (positions: PositionUpdate[]) => void) {
    this.onPositionUpdate = callback
  }

  public onPricesUpdate(callback: (prices: Record<string, number>) => void) {
    this.onPriceUpdate = callback
  }

  public onConnectionStatusChange(callback: (connected: boolean) => void) {
    this.onConnectionChange = callback
  }

  public getConnectionStatus(): boolean {
    return this.isConnected
  }

  public disconnect() {
    if (this.ws) {
      this.ws.close()
      this.ws = null
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
  public subscribe(symbol: string) {
    this.subscribeToTickers([symbol])
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const bybitWebSocket = new BybitWebSocket()
